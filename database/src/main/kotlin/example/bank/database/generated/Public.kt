/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated


import example.bank.database.generated.sequences.ACCOUNT_HOLDER_ID_SEQ
import example.bank.database.generated.sequences.ACCOUNT_TRANSACTION_ID_SEQ
import example.bank.database.generated.sequences.BANK_ACCOUNT_ID_SEQ
import example.bank.database.generated.tables.AccountHolder
import example.bank.database.generated.tables.AccountTransaction
import example.bank.database.generated.tables.BankAccount

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Sequence
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC = Public()
    }

    /**
     * The table <code>public.account_holder</code>.
     */
    val ACCOUNT_HOLDER get() = AccountHolder.ACCOUNT_HOLDER

    /**
     * The table <code>public.account_transaction</code>.
     */
    val ACCOUNT_TRANSACTION get() = AccountTransaction.ACCOUNT_TRANSACTION

    /**
     * The table <code>public.bank_account</code>.
     */
    val BANK_ACCOUNT get() = BankAccount.BANK_ACCOUNT

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getSequences(): List<Sequence<*>> = listOf(
        ACCOUNT_HOLDER_ID_SEQ,
        ACCOUNT_TRANSACTION_ID_SEQ,
        BANK_ACCOUNT_ID_SEQ
    )

    override fun getTables(): List<Table<*>> = listOf(
        AccountHolder.ACCOUNT_HOLDER,
        AccountTransaction.ACCOUNT_TRANSACTION,
        BankAccount.BANK_ACCOUNT
    )
}
