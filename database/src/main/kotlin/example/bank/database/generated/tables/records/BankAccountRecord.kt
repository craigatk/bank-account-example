/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables.records


import example.bank.database.generated.enums.BankAccountType
import example.bank.database.generated.tables.BankAccount

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BankAccountRecord() : UpdatableRecordImpl<BankAccountRecord>(BankAccount.BANK_ACCOUNT), Record3<Long?, Long?, BankAccountType?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var accountHolderId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var accountType: BankAccountType?
        set(value) = set(2, value)
        get() = get(2) as BankAccountType?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, BankAccountType?> = super.fieldsRow() as Row3<Long?, Long?, BankAccountType?>
    override fun valuesRow(): Row3<Long?, Long?, BankAccountType?> = super.valuesRow() as Row3<Long?, Long?, BankAccountType?>
    override fun field1(): Field<Long?> = BankAccount.BANK_ACCOUNT.ID
    override fun field2(): Field<Long?> = BankAccount.BANK_ACCOUNT.ACCOUNT_HOLDER_ID
    override fun field3(): Field<BankAccountType?> = BankAccount.BANK_ACCOUNT.ACCOUNT_TYPE
    override fun component1(): Long? = id
    override fun component2(): Long? = accountHolderId
    override fun component3(): BankAccountType? = accountType
    override fun value1(): Long? = id
    override fun value2(): Long? = accountHolderId
    override fun value3(): BankAccountType? = accountType

    override fun value1(value: Long?): BankAccountRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): BankAccountRecord {
        this.accountHolderId = value
        return this
    }

    override fun value3(value: BankAccountType?): BankAccountRecord {
        this.accountType = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: BankAccountType?): BankAccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised BankAccountRecord
     */
    constructor(id: Long? = null, accountHolderId: Long? = null, accountType: BankAccountType? = null): this() {
        this.id = id
        this.accountHolderId = accountHolderId
        this.accountType = accountType
    }
}
