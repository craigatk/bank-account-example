/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables.records


import example.bank.database.generated.tables.AccountTransaction

import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountTransactionRecord() : UpdatableRecordImpl<AccountTransactionRecord>(AccountTransaction.ACCOUNT_TRANSACTION), Record4<Long?, Long?, BigDecimal?, String?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var bankAccountId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var amount: BigDecimal?
        set(value) = set(2, value)
        get() = get(2) as BigDecimal?

    var transactionType: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, BigDecimal?, String?> = super.fieldsRow() as Row4<Long?, Long?, BigDecimal?, String?>
    override fun valuesRow(): Row4<Long?, Long?, BigDecimal?, String?> = super.valuesRow() as Row4<Long?, Long?, BigDecimal?, String?>
    override fun field1(): Field<Long?> = AccountTransaction.ACCOUNT_TRANSACTION.ID
    override fun field2(): Field<Long?> = AccountTransaction.ACCOUNT_TRANSACTION.BANK_ACCOUNT_ID
    override fun field3(): Field<BigDecimal?> = AccountTransaction.ACCOUNT_TRANSACTION.AMOUNT
    override fun field4(): Field<String?> = AccountTransaction.ACCOUNT_TRANSACTION.TRANSACTION_TYPE
    override fun component1(): Long? = id
    override fun component2(): Long? = bankAccountId
    override fun component3(): BigDecimal? = amount
    override fun component4(): String? = transactionType
    override fun value1(): Long? = id
    override fun value2(): Long? = bankAccountId
    override fun value3(): BigDecimal? = amount
    override fun value4(): String? = transactionType

    override fun value1(value: Long?): AccountTransactionRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): AccountTransactionRecord {
        this.bankAccountId = value
        return this
    }

    override fun value3(value: BigDecimal?): AccountTransactionRecord {
        this.amount = value
        return this
    }

    override fun value4(value: String?): AccountTransactionRecord {
        this.transactionType = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: BigDecimal?, value4: String?): AccountTransactionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised AccountTransactionRecord
     */
    constructor(id: Long? = null, bankAccountId: Long? = null, amount: BigDecimal? = null, transactionType: String? = null): this() {
        this.id = id
        this.bankAccountId = bankAccountId
        this.amount = amount
        this.transactionType = transactionType
    }
}
