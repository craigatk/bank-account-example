/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables


import example.bank.database.generated.Public
import example.bank.database.generated.keys.ACCOUNT_TRANSACTION_PKEY
import example.bank.database.generated.keys.ACCOUNT_TRANSACTION__ACCOUNT_TRANSACTION_BANK_ACCOUNT_ID_FKEY
import example.bank.database.generated.tables.records.AccountTransactionRecord

import java.math.BigDecimal

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountTransaction(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AccountTransactionRecord>?,
    aliased: Table<AccountTransactionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AccountTransactionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.account_transaction</code>
         */
        val ACCOUNT_TRANSACTION = AccountTransaction()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AccountTransactionRecord> = AccountTransactionRecord::class.java

    /**
     * The column <code>public.account_transaction.id</code>.
     */
    val ID: TableField<AccountTransactionRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.account_transaction.bank_account_id</code>.
     */
    val BANK_ACCOUNT_ID: TableField<AccountTransactionRecord, Long?> = createField(DSL.name("bank_account_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.account_transaction.amount</code>.
     */
    val AMOUNT: TableField<AccountTransactionRecord, BigDecimal?> = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 2).nullable(false), this, "")

    /**
     * The column <code>public.account_transaction.transaction_type</code>.
     */
    val TRANSACTION_TYPE: TableField<AccountTransactionRecord, String?> = createField(DSL.name("transaction_type"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AccountTransactionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AccountTransactionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.account_transaction</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.account_transaction</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.account_transaction</code> table reference
     */
    constructor(): this(DSL.name("account_transaction"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AccountTransactionRecord>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT_TRANSACTION, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<AccountTransactionRecord, Long?> = super.getIdentity() as Identity<AccountTransactionRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<AccountTransactionRecord> = ACCOUNT_TRANSACTION_PKEY
    override fun getKeys(): List<UniqueKey<AccountTransactionRecord>> = listOf(ACCOUNT_TRANSACTION_PKEY)
    override fun getReferences(): List<ForeignKey<AccountTransactionRecord, *>> = listOf(ACCOUNT_TRANSACTION__ACCOUNT_TRANSACTION_BANK_ACCOUNT_ID_FKEY)
    fun bankAccount(): BankAccount = BankAccount(this, ACCOUNT_TRANSACTION__ACCOUNT_TRANSACTION_BANK_ACCOUNT_ID_FKEY)
    override fun `as`(alias: String): AccountTransaction = AccountTransaction(DSL.name(alias), this)
    override fun `as`(alias: Name): AccountTransaction = AccountTransaction(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AccountTransaction = AccountTransaction(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AccountTransaction = AccountTransaction(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, Long?, BigDecimal?, String?> = super.fieldsRow() as Row4<Long?, Long?, BigDecimal?, String?>
}
