/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables.daos


import example.bank.database.generated.tables.BankAccount
import example.bank.database.generated.tables.records.BankAccountRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BankAccountDao(configuration: Configuration?) : DAOImpl<BankAccountRecord, example.bank.database.generated.tables.pojos.BankAccount, Long>(BankAccount.BANK_ACCOUNT, example.bank.database.generated.tables.pojos.BankAccount::class.java, configuration) {

    /**
     * Create a new BankAccountDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: example.bank.database.generated.tables.pojos.BankAccount): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<example.bank.database.generated.tables.pojos.BankAccount> = fetchRange(BankAccount.BANK_ACCOUNT.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<example.bank.database.generated.tables.pojos.BankAccount> = fetch(BankAccount.BANK_ACCOUNT.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): example.bank.database.generated.tables.pojos.BankAccount? = fetchOne(BankAccount.BANK_ACCOUNT.ID, value)

    /**
     * Fetch records that have <code>account_holder_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAccountHolderId(lowerInclusive: Long?, upperInclusive: Long?): List<example.bank.database.generated.tables.pojos.BankAccount> = fetchRange(BankAccount.BANK_ACCOUNT.ACCOUNT_HOLDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>account_holder_id IN (values)</code>
     */
    fun fetchByAccountHolderId(vararg values: Long): List<example.bank.database.generated.tables.pojos.BankAccount> = fetch(BankAccount.BANK_ACCOUNT.ACCOUNT_HOLDER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>account_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAccountType(lowerInclusive: String?, upperInclusive: String?): List<example.bank.database.generated.tables.pojos.BankAccount> = fetchRange(BankAccount.BANK_ACCOUNT.ACCOUNT_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>account_type IN (values)</code>
     */
    fun fetchByAccountType(vararg values: String): List<example.bank.database.generated.tables.pojos.BankAccount> = fetch(BankAccount.BANK_ACCOUNT.ACCOUNT_TYPE, *values)
}
