/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables.records


import example.bank.database.generated.tables.AccountHolder

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountHolderRecord() : UpdatableRecordImpl<AccountHolderRecord>(AccountHolder.ACCOUNT_HOLDER), Record3<Long?, String?, String?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var firstName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var lastName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, String?, String?> = super.fieldsRow() as Row3<Long?, String?, String?>
    override fun valuesRow(): Row3<Long?, String?, String?> = super.valuesRow() as Row3<Long?, String?, String?>
    override fun field1(): Field<Long?> = AccountHolder.ACCOUNT_HOLDER.ID
    override fun field2(): Field<String?> = AccountHolder.ACCOUNT_HOLDER.FIRST_NAME
    override fun field3(): Field<String?> = AccountHolder.ACCOUNT_HOLDER.LAST_NAME
    override fun component1(): Long? = id
    override fun component2(): String? = firstName
    override fun component3(): String? = lastName
    override fun value1(): Long? = id
    override fun value2(): String? = firstName
    override fun value3(): String? = lastName

    override fun value1(value: Long?): AccountHolderRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): AccountHolderRecord {
        this.firstName = value
        return this
    }

    override fun value3(value: String?): AccountHolderRecord {
        this.lastName = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?): AccountHolderRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AccountHolderRecord
     */
    constructor(id: Long? = null, firstName: String? = null, lastName: String? = null): this() {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
    }
}
