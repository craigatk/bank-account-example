/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables


import example.bank.database.generated.Public
import example.bank.database.generated.enums.BankAccountType
import example.bank.database.generated.keys.BANK_ACCOUNT_PKEY
import example.bank.database.generated.keys.BANK_ACCOUNT__BANK_ACCOUNT_ACCOUNT_HOLDER_ID_FKEY
import example.bank.database.generated.tables.records.BankAccountRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BankAccount(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BankAccountRecord>?,
    aliased: Table<BankAccountRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BankAccountRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.bank_account</code>
         */
        val BANK_ACCOUNT = BankAccount()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BankAccountRecord> = BankAccountRecord::class.java

    /**
     * The column <code>public.bank_account.id</code>.
     */
    val ID: TableField<BankAccountRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.bank_account.account_holder_id</code>.
     */
    val ACCOUNT_HOLDER_ID: TableField<BankAccountRecord, Long?> = createField(DSL.name("account_holder_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.bank_account.account_type</code>.
     */
    val ACCOUNT_TYPE: TableField<BankAccountRecord, BankAccountType?> = createField(DSL.name("account_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(example.bank.database.generated.enums.BankAccountType::class.java), this, "")

    private constructor(alias: Name, aliased: Table<BankAccountRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BankAccountRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.bank_account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.bank_account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.bank_account</code> table reference
     */
    constructor(): this(DSL.name("bank_account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BankAccountRecord>): this(Internal.createPathAlias(child, key), child, key, BANK_ACCOUNT, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<BankAccountRecord, Long?> = super.getIdentity() as Identity<BankAccountRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BankAccountRecord> = BANK_ACCOUNT_PKEY
    override fun getKeys(): List<UniqueKey<BankAccountRecord>> = listOf(BANK_ACCOUNT_PKEY)
    override fun getReferences(): List<ForeignKey<BankAccountRecord, *>> = listOf(BANK_ACCOUNT__BANK_ACCOUNT_ACCOUNT_HOLDER_ID_FKEY)

    private lateinit var _accountHolder: AccountHolder
    fun accountHolder(): AccountHolder {
        if (!this::_accountHolder.isInitialized)
            _accountHolder = AccountHolder(this, BANK_ACCOUNT__BANK_ACCOUNT_ACCOUNT_HOLDER_ID_FKEY)

        return _accountHolder;
    }
    override fun `as`(alias: String): BankAccount = BankAccount(DSL.name(alias), this)
    override fun `as`(alias: Name): BankAccount = BankAccount(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BankAccount = BankAccount(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BankAccount = BankAccount(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, Long?, BankAccountType?> = super.fieldsRow() as Row3<Long?, Long?, BankAccountType?>
}
