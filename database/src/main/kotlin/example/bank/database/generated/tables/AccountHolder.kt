/*
 * This file is generated by jOOQ.
 */
package example.bank.database.generated.tables


import example.bank.database.generated.Public
import example.bank.database.generated.indexes.ACCOUNT_HOLDER_USER_NAME_IDX
import example.bank.database.generated.keys.ACCOUNT_HOLDER_PKEY
import example.bank.database.generated.keys.ACCOUNT_HOLDER_USER_NAME_KEY
import example.bank.database.generated.tables.records.AccountHolderRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountHolder(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AccountHolderRecord>?,
    aliased: Table<AccountHolderRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AccountHolderRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.account_holder</code>
         */
        val ACCOUNT_HOLDER = AccountHolder()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AccountHolderRecord> = AccountHolderRecord::class.java

    /**
     * The column <code>public.account_holder.id</code>.
     */
    val ID: TableField<AccountHolderRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.account_holder.user_name</code>.
     */
    val USER_NAME: TableField<AccountHolderRecord, String?> = createField(DSL.name("user_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.account_holder.first_name</code>.
     */
    val FIRST_NAME: TableField<AccountHolderRecord, String?> = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.account_holder.last_name</code>.
     */
    val LAST_NAME: TableField<AccountHolderRecord, String?> = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<AccountHolderRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AccountHolderRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.account_holder</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.account_holder</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.account_holder</code> table reference
     */
    constructor(): this(DSL.name("account_holder"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AccountHolderRecord>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT_HOLDER, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(ACCOUNT_HOLDER_USER_NAME_IDX)
    override fun getIdentity(): Identity<AccountHolderRecord, Long?> = super.getIdentity() as Identity<AccountHolderRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<AccountHolderRecord> = ACCOUNT_HOLDER_PKEY
    override fun getKeys(): List<UniqueKey<AccountHolderRecord>> = listOf(ACCOUNT_HOLDER_PKEY, ACCOUNT_HOLDER_USER_NAME_KEY)
    override fun `as`(alias: String): AccountHolder = AccountHolder(DSL.name(alias), this)
    override fun `as`(alias: Name): AccountHolder = AccountHolder(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AccountHolder = AccountHolder(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AccountHolder = AccountHolder(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, String?, String?, String?> = super.fieldsRow() as Row4<Long?, String?, String?, String?>
}
