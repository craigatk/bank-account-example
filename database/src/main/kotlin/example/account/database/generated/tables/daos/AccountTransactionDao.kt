/*
 * This file is generated by jOOQ.
 */
package example.account.database.generated.tables.daos


import example.account.database.generated.tables.AccountTransaction
import example.account.database.generated.tables.records.AccountTransactionRecord

import java.math.BigDecimal

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountTransactionDao(configuration: Configuration?) : DAOImpl<AccountTransactionRecord, example.account.database.generated.tables.pojos.AccountTransaction, Long>(AccountTransaction.ACCOUNT_TRANSACTION, example.account.database.generated.tables.pojos.AccountTransaction::class.java, configuration) {

    /**
     * Create a new AccountTransactionDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: example.account.database.generated.tables.pojos.AccountTransaction): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetchRange(AccountTransaction.ACCOUNT_TRANSACTION.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetch(AccountTransaction.ACCOUNT_TRANSACTION.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): example.account.database.generated.tables.pojos.AccountTransaction? = fetchOne(AccountTransaction.ACCOUNT_TRANSACTION.ID, value)

    /**
     * Fetch records that have <code>bank_account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfBankAccountId(lowerInclusive: Long?, upperInclusive: Long?): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetchRange(AccountTransaction.ACCOUNT_TRANSACTION.BANK_ACCOUNT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>bank_account_id IN (values)</code>
     */
    fun fetchByBankAccountId(vararg values: Long): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetch(AccountTransaction.ACCOUNT_TRANSACTION.BANK_ACCOUNT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetchRange(AccountTransaction.ACCOUNT_TRANSACTION.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: BigDecimal): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetch(AccountTransaction.ACCOUNT_TRANSACTION.AMOUNT, *values)

    /**
     * Fetch records that have <code>transaction_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTransactionType(lowerInclusive: String?, upperInclusive: String?): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetchRange(AccountTransaction.ACCOUNT_TRANSACTION.TRANSACTION_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>transaction_type IN (values)</code>
     */
    fun fetchByTransactionType(vararg values: String): List<example.account.database.generated.tables.pojos.AccountTransaction> = fetch(AccountTransaction.ACCOUNT_TRANSACTION.TRANSACTION_TYPE, *values)
}
